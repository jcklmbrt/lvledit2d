import freetype
import png
import rectpack

PAD_X = 2
PAD_Y = 2
IMAGE_WIDTH = 128
IMAGE_HEIGHT = 128
CHAR_RANGE = 128
OUTPUT = "tahoma12"
FONT_PATH = "C:\\Windows\\Fonts\\tahoma.ttf"
FONT_SIZE = 12
ANTIALIAS = False

OUTPUT_PNG = OUTPUT + ".png"
OUTPUT_HPP = OUTPUT_PNG + ".hpp"

pck = rectpack.newPacker(rotation=False)
face = freetype.Face(FONT_PATH)
face.set_char_size(FONT_SIZE * 64)

D = {}
P = {}

for ch in range(CHAR_RANGE):
    if ANTIALIAS:
        face.load_char(chr(ch))
    else:
        face.load_char(chr(ch), freetype.FT_LOAD_RENDER |
                                freetype.FT_LOAD_MONOCHROME |
                                freetype.FT_LOAD_TARGET_MONO)
    bitmap = face.glyph.bitmap
    width  = face.glyph.bitmap.width
    rows   = face.glyph.bitmap.rows
    pitch  = face.glyph.bitmap.pitch

    if (width == 0 and rows == 0) or not chr(ch).isprintable():
        continue

    P[ch] = {
        'w': width,
        'h': rows,
        'left': face.glyph.bitmap_left,
        'top': face.glyph.bitmap_top,
        'xadvance': face.glyph.advance.x >> 6
    }

    if ANTIALIAS:
        data = []
        for i in range(rows):
            row = list(bitmap.buffer[i * pitch : i * pitch + width])
            data.append(row)
    else:
        data = [[0] * width for _ in range(rows)]
        for y in range(rows):
           for x in range(width):
                byte = bitmap.buffer[y * pitch + (x >> 3)]
                bit = 7 - (x & 7)
                data[y][x] = 255 if (byte >> bit) & 1 else 0

    D[ch] = data     
    pck.add_rect(width + PAD_X, height=rows + PAD_Y, rid=ch)

pck.add_bin(IMAGE_WIDTH, IMAGE_HEIGHT)
pck.pack()

bmp = [[0 for _ in range(IMAGE_HEIGHT)]
          for _ in range(IMAGE_WIDTH)]

for _, x, y, w, h, rid in pck.rect_list():
    P[rid]['x'] = x
    P[rid]['y'] = y
    for dy in range(h - PAD_X):
        for dx in range(w - PAD_Y):
            bmp[y+dy][x+dx] = D[rid][dy][dx]

png.from_array(bmp, "L").save(OUTPUT_PNG)

s = "\t"
with open(OUTPUT_PNG, "rb") as f:
    byte = f.read(1)
    n = 0
    while byte:
        s += "0x" + byte.hex().upper()
        byte = f.read(1)
        if byte:
            s += ", "
        else: s += "\n"
        n = n + 1
        if n % 16 == 0:
            s += "\n\t"

with open(OUTPUT_HPP, "w") as f:
    f.write("// this file was generated by font_gen.py\n")
    f.write(f"#ifndef _{OUTPUT}_PNG_HPP\n")
    f.write(f"#define _{OUTPUT}_PNG_HPP\n")

    f.write(f"namespace {OUTPUT}" + " {\n")
    f.write("constexpr unsigned char data[] = {\n")
    f.write(s)
    f.write("};\n")
    f.write("struct position {\n\tint x, y, w, h, left, top, xadvance;\n};\n")
    f.write("constexpr position pc[] = {\n")
    s = "\t"
    for ch in range(CHAR_RANGE):
        if ch in P:
            x = P[ch]['x']
            y = P[ch]['y']
            w = P[ch]['w']
            h = P[ch]['h']
            left = P[ch]['left']
            top = P[ch]['top']
            xadvance = P[ch]['xadvance']
            s += "{" + f" {x}, {y}, {w}, {h}, {left}, {top}, {xadvance} " + "}"
        else:
            s += "{ 0 }"
        if ch + 1 != CHAR_RANGE:
            s += ",\n\t"
        else: s += "\n"
    f.write(s + "};\n")
    f.write("}\n")
    f.write("#endif")
